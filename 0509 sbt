0509

apiService.js -> call 함수를 만들어서 axios 요청을 대신한다

확장이나 유지보수에 대한 가능성을 생각해야함
추상화, 모듈화를 시켜놓는게 좋다

url에 따라서 controller가 실행

스프링부트는 결국 스프링을 기반으로 만들어진 프레임워크

스프링에서는 기본적인 설정들을 어느정도 해줬어야 했다.

web.xml -> 스프링의 설정과 관련된 코드들이 있는 파일
스프링부트는 웬만한 설정들은 내부에 다 되어있다

DispatcherServiet

HandlerMapping: 요청 URL -> 어떤 컨트롤러의 메서드가 이 요청을 처리할 것인가를 결정하는 것

HandlerAdapter: Mapping에서 골라준 메서드를 실행하고 결과를 받아오는 객체

----------------------------------------------------------------------------------------
토큰기반인증

사용자가 로그인에 성공하여 인증이 되면 서버측에서 토큰을 발급해준다

권한이 필요한 서비스에 클라이언트가 요청을 할 때마다 토큰을 같이 전달하므로써 권한이 있는지
확인을 한다

통신은 1회성이다
요청과 응답을 한 번 주고받으면 통신이 끝난다
로그인을 한 상태를 기억하고 있지 않는다
어쩔 수 없이 권한이 필요할 때마다 아이디와 비밀번호를 보내야 한다

세션
로그인을 하면 서버측에서 세션 객체를 만들어서 저장을 해놓는다
세션객체는 시간을 정해놓거나, 로그아웃을 하기전까지 유지
브라우저 하나당 1세션이기 때문에 탭을 껐다켜도 로그인은 유지가 되어있다

권한이 필요한 서비스로 접근할 때 세션객체가 있다면 로그인이 되어있다고 간주한다

단점
사용자가 많아지면 서버에 부담이 간다
유휴세션을 주기적으로 정리해줘야 한다
RESTful설계위배
HTTP의 기본인 무상태 특성을 훼손한다

JSON 웹 토큰
-JSON 형식으로 사용자 정보를 저장하고  서명을 통해 토큰의 무결성을 검증하는 토큰 기반 인증 방식

회원가입, 로그인, 기능을 만들었다
1. 로그인 구현했으나 다른 API들은 유저가 로그인 했는지 모른다
우리가 만든 REST API기능은 무상태이므로 로그인 상태를 기억하지 않는다
2.지금 까지 적성한 API에서는 로그인 여부 자체를 확인 안하고 있다
-임시 유저 아이디만 제공을 하고 있다
-따라서 현재 로그인 기능이 있어도, 어떤 유저가 로그인을 하던간에 같은 TODo리스트를 보게 될것이다

스프링 시큐리티 통합
유저와 관련된 클래스들은 로그인 여부를 저장하지 않는다는 점에서 불완전한 상태이다
스프링 시큐리티와 JWT를 이용해서 해결해보자

로그인 유지 구현
모든 요청 API에 토근을 보낸다
각API들은 토큰을 확인하고 접근 허용 또는 거부하는 코드를 실행
문제는 모든 APIrk 이 작업을 해야한다는 것
createTodo, getTodo,updateTodo,deleteTodo 네 개의 API가 존재한다
만약 50개가 넘는 API를 관리한다고 생각하면 50번이다 같은 코드를 작성해야 한다는 문제가 발생한다

스프링 시큐리티를 이용해 코드를 한번만 작성하고 , 이 코드가 모든 API를 수행하기 바로 전에 실행되도록
구현해보자

JWT 생성 및 반환을 구현
-유저 정보를 바탕으로 헤더와 페이로드를 작성하고 전자 서명을 한 후 토큰을 반환할 것이다
-구현을 위해 JWT관련 라이브러리를 gradle의존성에 추가할 것이다

스프링 시큐리티
스프링 기반 어플리케이션에서 인증과 인가를 처리하기 위한 보안 프레임워크이다
스프링 어플리케이션에서 보안과 관련된 다양한 요구 사항을 손쉽게 구현할 수 있도록 돕는다

주요개념
1.인증
-사용자가 누구인지 확인하는 과정
-사용자 어플리케이션에 접근할 때 제공하는 자격증명을 확인하여 신원을 검증하는 단계

2.인가
-인증된 사용자에게 어떤 시로스에 접근할 수 있는지 결정하는 과정
-사용자에게 주어진 역할과 권한에 따라 리소스에 대한 접근 권환을 부여한다

3.필터 기반 아키텍쳐
-스프링 시큐리티는 필터 체인 기반으로 동작
-HTTP요청이 들어오면 여러 보안 필터들이 순차적으로 실행되어 요청을 처리하고, 보안 관련
로직을 적용한다

스프링 시큐리티와 시블릿 필터
-API가 실행될 때마다 기능이 실행되기 전 사요자 인증을 해야한다
-필터가 HTTP 요청과 응답을 가로채, 요청이 컨트롤러에 도달하기 전 또는 응답이 클라이언트에게
전달되기 전 필요한 전처리, 후 처리를 수행하는데 사용된다
-주로 보안,로그기록(로깅) 인코딩 설정, 데이터 압축 등의 작업을 처리 할 때 유용하다
-서블릿 필터를 구현하고 서블릿 필터를 서블릿 컨테이너가 실행하도록 설정만 해주면 된다

































