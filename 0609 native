파이어베이스
firebase 페이지에 가서 프로젝트를 생성한다
키를 발급하고 프로젝트에 저장을 한다

파이어베이스를 사용하기 위한 라이브러리 설치
npm install firebase

initializeApp(key) 함수를 통해서 firebase와 연결

로그인 기능 사용하기
getAuth(): 현재 firebase 앱과 연결된 인증 객체를 가져오는 함수
const auth = getAuth(app);
이렇게 얻어온 객체를 통해서 로그인, 회원가입, 로그아웃 등 인증관련 기능을 수행할 수 있다

signlnWithEmailAndPassword((auth,email,password): 이메일과 비밀번호로 로그인을 시도하는 함수

createUserWithEmailAndPassword(auth,email,password): 이메일과 비밀번호로 새 계정을 생성하는 함수
인자로 이메일과 패스워드를 보내면 추가는 firebase가 알아서 해준다

updateProfile(업데이트할 대상 객체, 업데이트할 내용): 유저의 프로필을 업데이트하는 함수

스토리지 관련함수
스토리지: firebase에서 제공하는 저장소

로그인이 끝나면 스피너가 종료되게 만들자

내용을 다 입력하고 회원가입 버튼을 눌렀을 때 스프너가 나타나고 처리가 다 되면 스피너가 사라지도록
만들어보자

메인화면
대부분의 어플리케이션에서 사용자의 데이터 또는 서비스의 데이터를 이용하려면 데이터에 접근할 수 있는
유요한 사용자라는 것을 증명해야 한다

인증 후에는 서비스를 이용할 수 있는 화면이 렌더링 되고 , 로그아웃 등으로 인증 상태를 해제하면 
다시 인증을 위한 화면으로 이동한다

우리가 지금까지 만든 AuthStack 네비게이션에서 사용되는 화면들은 인증 이전에 사용되는
인증을 위한 화면이 된다

이제 인증 후 사용될 화면과 화면들을 관리하는 네비게이션을 만들어보자

네비게이션을 복합적으로 사용할 수 있다
Screen에 화면으로 사용할 컴포넌트를 지정을 한다
네비게이션도 결국 컴포넌트이기 때문에 화면으로 사용할 수 있다

인증과 화면 전환
인증 상태에 따라 MainStack네비게이션과 AuthStack 네비게을 렌더링 해보자
-어플리케이션이 시작되면 AuthStack 네비게이션이 랜더링되야한다
-로그인 또는 회원가입을 통해 인증에 성공하면 MainStack 네비게이션이 렌더링되야 한다
-로그아웃을 통해 인증상태가 사라지면 다시 AuthStack이 랜더링되야 한다

인증상태 관리
-여러 곳에서 상태를 변경해야 하는 경우 Spinner처럼 전역적으로 Context API 를 이용하면
수월하게 관리할 수 있다

로그인을 한 후, 회원가입을 한 후






























