채널 생성 화면
-채널 생성 화면을 만들고 생성된 채널을 파이어베이스로 관리해보자

-현재 서버를 구축하지 않았기 때문에 채널 데이터를 관리하기 위해 파이어베이스의 
데이터베이스를 활용할 것이다

-파이어배이스에서 제공하는 파이어스토어는 NoSQL문서 중심의 데이터베이스로
SQL 데이터베이스와 달리 테이블이나 행이 없고 컬렉션 문서, 필드 개념으로 구성되어있다

NoSQL
다양하고 유연한 데이터 모델을 활용하는 데이터베이스 기술을 총칭하는 용어
Not Only SQL 라는 의미를 가진다
관계형 DB의 단점을 보완하거나 특정 요구 사항을 효율적으로 처리하기 위해 탄생했다

탄생배경
1. 빅데이터 및 대규모 트래픽 처리 요구
-인터넷 서비스가 폭팔적으로 성장하면서, 데이터 양과 트랜잭션이 방대해졌다
-전통적 RDBMS를 대규모로 확정하려면 비용이 많이 들고, 스키마 변경도 까다롭다

2. 유연한 스키망의 필요성
-웹/모바일 어플리케이션에서 데이터 형태가 자주 변하거나, 구조가 불규칙할 경우가 늘어남
-RDBMS는 스키마 변경 시 마이그레이션이 필수이나, 개발 속도가 중요한 스타트업 환경 등에서는 비효율적이다.

3.분산 시스템 설계
-규모가 커질수록 수평확장 방식이 유리한데, RDBMS는 공유 저장소나 쿼리 복잡성 때문에 분산에 한계가 있다

고성능 처리
-단순 키-값 접근, 인덱스 최적화, 메모리 기반 저장 등 다향한 기법으로 빠른 읽기/쓰기를 제공

NoSQL의 유형
1.key-value 스토어
-단순한 키, 값 쌍으로 데이터를 저장
-특징: 빠른 읽기/쓰기 속도, 단순한 퀴리 모델

2.문서기반
-JSON 형태로 데이터를 저장

3.컬럼 기반
-테이블 처럼 보이지만, 각 행이 매우 많은 컬럼들을 동적으로 갖거나, 특정 컬럼 패밀리로 묶어서 관리한다
-특징: 수평 확장성 뛰어남, 대규모 쓰기/조회에 강함, 통신/로그/loT 데이터 같은 시계열
처리에 많이 사용된다

4.그래프 기반
-노드와 엣지 구조로, 관계를 1차적인 데이터 모델로 삼음
-특징: 그래프 탐색, 추천 알고리즘, 소셜 네트워크 분석, 경로 찾기에 최적화

장점
-높은 확장성
-유연한 스키마
-높은 성능

단점
-관계 연산의 어려움: JSON같은 복잡한 관계 쿼리에 불리할 수 있음
-표준화 부족: SQL처럼 표준화된 쿼리 언어가 없어, DB제품별로 API/쿼리 문법이 상이하다

문서기반 NoSQL
-각 데이터를 독립적인 문서 형태로 저장하는 비관계형 데이터베이스 
-컬렉션, 문서, 필드 개념이 핵심이다

컬렉션
-여러 문서를 담는 논리적인 그룹
-테이블과 유사한 개념으로, 특정 주제나 목적에 따라 문서들을 묶어서 보관하는 역할
-사용자 관련 users 컬렉션, 제품 정보를 저장하는 product 컬렉션

특징
-컬렉션에는 일정한 스키마가 강제되지 않는다
-예: users 컬렉션 안에 있는 각각의 문서가 서로 다른 필드를 가질 수 도 있다
-일반적으로 컬렉션 이름만 지정하면 별도의 스키마 정의 없이도 문서를 생성/저장할 수 있다
-각 컬렉션별로 인덱스를 설정할 수 있으며, 효율적인 쿼리를 위해 필드에 인덱스를 걸 수 있다

2.문서 
-문서는 컬렉션 내에 저장되는 데이터의 실제 단위, 각 문서는 독립적인 객체 형태
-JSON형식을 사용하여 데이터를 구조화 한다
-관계형 데이터베이스에서 행에 대응되지만 훨씬 유연한 구졸르 담을 수 있다

-문서의 구조
-문서는 일반적으로 필드와 값 쌍을 여러개 포함하는 JSON 형태이다
-값에는 문자열, 숫자, 논리형, 배열, 객체 등 다양한 형태가 올 수 있다

필드
-문서 안에 있는 데이터 속성을 의미한다
-예: 이름, 이메일, 나이, 주소 등 문서가 담고있는 각각의 속성이 필드가 된다

자료형(타입)
-문서 기반 DB는 다양한 자료형을 지원한다
-기본타입: 문자열, 숫자, 논리형, 날짜, Null등
-복합타입: 배열, 중첩 객체, 이진 데이터 등 특정 필드는 한 문서에서는 문자열, 다른 문서에서는 숫자로
쓰는것도 가능은 하다(권장은 안함)

Firestore
firebase에서 제공하는 NoSQL 클라우드 데이터베이스로, 일반적인 데이터베이스와 달리
데이터베이스의 내용이 수정되면 실시간으로 변경된 내용을 알 수 있다는 특징을 갖고 있다

컬렉션과 문서는 항상 유일한 ID를 가지고 있어야 한다는 규칙이 있다
channels라는 ID를 가진 하나의 컬렉션을 만들고 생성되는 채널들을 channels 컬렉션에 문서로 저장할 것이다
파이어스토어는 채널 생성시 ID를 지정하지 않으면 자동으로 중복되지 않는 ID를 생성해서 문서의 ID로 이용한다

따라서 자동으로 생성되는 문서의 ID를 이용해 채널의 문서가 ID가 중복되지 않도록 관리를 할 것이다

인증에 성공한 사용자만 데이터베이스를 읽거나 쓸 수 있도록 데이터베이스의 보안 규칙을 수정하자

firestore의 주요 함수
firestore에서 데이터를 다루려면 collection()과 doc()를 사용해 컬렉션 또는 문서를 참조해야 한다

collection(dv,path)
-특정 컬렉션(테이블)을 참조하는 객체를 반환

doc(db,path,documentld)
-특정 문서를 참조하는 객체를 반환

2.데이터 추가 및 수정
setDoc(docRef, data, options?)
-문서가 없으면 새로운 문서를 추가한다
-문서가 존재하면 덮어쓰기가 된다

updateDoc(docRef,data)
-기존 문서의 일부 필드만 업데이트 한다
-문서가 없으면 에러가 발생한다

deleteField()
-문서의 특정 필드를 삭제한다

3.데이터 읽기
-firestore 에서 데이터를 가져올 때 사용하는 함수

getDoc(docRef)
-특정 문서를 한 번 가져온다

getDocs(collectionRef)
-특정 컬렉션의 모든 문서를 가져온다
-해당 컬렉션으 직속 문서들만 가져오고 하위 컬렉션은 포함되지 않는다
































