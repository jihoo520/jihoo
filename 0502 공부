0502

클래스@Component를 붙히면 스프링컨테이너에 객체가 저장이된다




레이어드 아키텍처

영속계층
영속성을 관리하는 계층
영속성은 

2.데이터 조회
3.데이터 수정
4.데이터 삭제
영속계층의 구현 방식
주로 ORM도구를 사용하여 데이터베이스와 객체간의 매핑을 처리한다

ORM은 객체 지향 프로그래밍 언어에서 사용하는 객체와 관계형 데이터베이스에서 사용하는 테이블 간의
매핑을 자동으로 처리해 주는 기술

JPA
자바에서 가장 널리 사용되는 ORM프레임 워크로 객체와 관계형 데이터베이스간의 매핑을 처리한다
@Entity 클래스를 정의해서 데이터베이스의 테이블과 매핑해야한다

Spring Data JPA
1.데이터베이스 테이블과 1ㄷ대1로 매핑할 Entity클래스 생성하기
-@Entity 어노테이션을 사용하여 설정
@Table(name="테이블명")
데이터베이스에 있는 테이블을 검색해서 매핑
@Id
엔티티의 기본키로 설정
@GeneratedValue
기본키 값을 자동으로 생성하도록 지정한다

2.JPA Repository(CURD 작업)
JAP를 사용할때 Repository 인터페이스를 정의하여 CURD 작업을 처리할 수 있다
Spring Data JPA에서는 JpaRepository를 사용하여 기본적인 CURD작업을 쉽게 처리할 수 있다

영속계층의 구현
@Repository를 붙힌 리포지토리 클래스를 정의
JpaRepository 를 구현한다

Spring Data JPA에서 기본적으로 제공하는 메서드
1.저장
-save(): 엔티티를 저장하거나, 이미 존재하는 엔티티를 업데이트
2.조회
-findByld(): ID로 엔티티를 조회한다. 반환값은 Optional이다
-findAll(): 모든 엔티티를 조회한다

3.삭제
-delete(): 특정 엔티티를 삭제한다

4.카운트
-count(): 엔티티의 총 개수를 반환한다

5.존재여부확힌
-existsByld(): 특정 IDrk 존재하는지 확인한다

직접작성하는 메서드
쿼리메서드: 메서드 이름은 기반으로 자동으로 쿼리를 생성하는 기능을 제공한다

기본규칙
접두어
findBy: 주어진 조건으로 엔티티를 찾는다

countBy:특정 조건을 만족하는 레코드 개수를 반환

exsitsBy: 특정 조건을 만족하는 레코드가 존재하는지 확인

deleteBy: 주어진 조건에 해당되는 레코드 삭제

2.조건의 결합
And/Or

서비스 계층
update() 메서드 작성하기
































