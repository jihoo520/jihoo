0430

스프링부트 프레임 워크

프로젝트를 만들면 뼈대는 갖춰져있다

스프링→ 스프링 부트

ㄴ 설정을 집접해줘야 하는 것들이 꽤 많았다

스프링부트로 넘어오면서 좀더  많은 것들이 자동으로 설정

스프링부트는 웹서버를 내장하고 있기 때문에 따로 설정이 필요하지 않다

제어역전

전통적인 방식: 개발자가 직접 객체를 생성하고 관리

제어역전방식: 컨테이너가 어플리케이션 동작에 필요한 객체를

생성, 관리 → 개발자는 ‘필요한 객체가 있다라는 선언만 하면 된다

의존성주입
제어역전을 구현한 대표적인 기법
의존관계가 필요한 곳에 스프링이 직접 객체를 연결해준다

1.필드에 직접 주입하기
2.setter를 이용해 주입하기
3.생성자를 이용해 주입하는 방법

스프링부트가 객체를 메모리에 올리는 방법
Main 클래스에 @SpringBootAppliction 어노테이션에 들어있는 @ComponentScan 어노테이션이 Main  클래스가 들어있는
패키지를 모두 탐색하면서 @Component 어노테이션이 붙어있는지 클래스를 모드 메모리에 올린다

Map형식으로 저장을 하는데 key를 클래스의 이름에서 첫 글자를 소문자로 바꾸고 저장,  value에 객체를 저장을 한다

스프링을 통해서 메모리에 올라간 객체를 bean이라고 부른다

스프링은 기본적으로 싱글톤 패턴을 지원하고 있다

스프링 객체 컨테이너에 한 개의 객체만 생성된다

어플리케이션 전반에서 같은 빈을 공유하기 때문에 메모리를 절약하고, bean간의 상태 공유가 가능하다

gradle

lombok
반복생성되는 코드들을 줄이기 위해 어노테이션 형식으로 선언할 수 있게 해줍니다

포스트맨
우리가 설계한 Api가 잘 작동하는지 확인하기 위한 투루

비즈니스 계층을 구현하는 것은 Service라는 이름으로

영속계층
데이터 저장, 조회, 삭제,수정 같은 영구 저장소와의 상호작용
SQL, ORM매핑, 트랜잭션 커밋 등

영속계층을 구현하는 클래스는 Repository라고 이름을 붙인다

요청을 통해 들어오거나 응답을 통해서 나가는 데이터가 존재할것이다

데이터를 담는 추상적인 개념을 Model이라고 한다
데이터를 주고 받을 때 데이터를 담는 저장소
계층간의 데이터를 주고받을 때는 DTO클래스

Data Transfer Object
클라이언트 -> 컨트롤러 -> 서비스
서비스 -> 컨트롤러 -> 클라이언트
Entity에 들어있는 민감한 사랑의 노출을 방지할 수 있다

Entity
데이터베이스와 통신할 때 사용하는 클래스
데이터베이스 테이블과 1:1 매핑

@pathVariable
-URL 경로의 일부를  변수로 사용할 수 있도록 지원하는 어노테이션
-URL에  포함된 값을 동작으로 받아와 메서드의 매개변수로 사용할 수 있다

-가장 우선시로 외워야 할 것들
-의존성주입
-아키텍처의 구성
-어노테이션들

쿼리스트링

POST로 요청시 URL에 쿼리스트링이 안붙는다
그래도 폼데이터를 처리하는데 사용할 수 있다

@RequestParam과 @PathVariable의 차이점

@RequestParam
주로 쿼리파라미터를 처리한다
또한, POST 요청에서 form 데이터도 처리할 수 있다

@PathVariable
RUL 경로의일부로 전달되는 변수를 처리한다
주로 RESTful API에서 리소스를 식별하기 위해 사용한다

@ReauestBody
HTTP 요청의 본문(body)에 담긴 데이터를 자바 객체로 변환하여 컨트롤러에 있는
메서드의 매개변수로 전달하는 어노테이션이다
주로 POST,PUT,PATCH 요청에서 사용되며, 클라이언트가 전송한 JSON<XML, 또는
폼 데이터 등을 자바 객체로 변환하는 역할을 한다

@ResponseBody
컨트롤러 메서드의 반환값을 HTTP 응답의 본문에 직접 포함시킬 떄 사용된다
HTML같은 템플릿을 반환하는 대신, 주로 JSON,XML, 문자열과 같은 데이터를 클라리언트에게 반환하는데 사용된다

 ResponseEntity
스프링에서 제공하는 클래스로 HTTP응답을 보다 세밀하게 제어할 수 있는 방법을 제공한다
HTTP 상테코드, 헤더, 응답, body부분을 포함한 전체 HTTP응답을 구성할 수 있으며 주로 REST API에서
많이 사용된다

주요기능
1. HTTP상태 코드 제어
-ResponseEntity를 사용하면 클라리언트에 응답할 떄HTTP상태 코드를 명시적으로 설정할 수 있다
2.HTTP헤더 제어
-응답에 HTTP헤더를 추가하거나 수정할 수 있다
-이를 통해 캐시 제어, 인증 정보, 콘텐츠 타입을 제어할 수 있다
3.응답 본문 제어
-응답 본문에 객체나 JSON데이터를 포함할 수 있다
-이 객체는 스프링에서 JSON 또는 XML로 직렬화되어 클라이언트에 반환한다

주요메서드
ok(): 200 OK상태코드로 응답하는 빌더 메서드
status: 특정 상태 코드를 반환하는 메서드
noContent(): 204 No Content응답을 반환하는 메서드
badRequest(): 400 Bad Request 응답을 반환하는 메서드
notFound(): 404 Not Found 응답을 반환하는 메서드

서비스 레이어
표현계층과 영속계층 사이에서 우리의 프로젝트의 기능을 담당하는 역할
HTTP와 긴밀히 연결된 컨트롤러에서 분리되어 있고, 데이터 베이스와 긴밀히 연관된 리포지토리와도
분리되어있다
따라서 서비스 레이어는 우리가 개발하고자 하는 로직에 집중할 수 있다

@Controller
@RestController
@Service
@Repository
@Configuration

다@Component의 자식 컴포넌트이다

영속계층
스플이 데이터 JPA
우리 어플리케이션의 목표는 Todo 아이템을 DB에 저장해야 한다

관계형 데이터베이스르 자바와 연결하려면 어떻게 해야 하는가
1. DBMS를 설치해야한다
2.테이블을 생성하고 아이템을 몇개 넣었다고 가정하자
-우리는 이후에 아이템을 검색하기 위해select쿼리를 날린다 
3.쿼리를 날리면 조건에 맞는 결과가 반환된다
4.반환된 결과를 가지고 자바 어플리케이션 내에서 사용해야 한다
5.JDBC드라이버를 통해 자바와 연결을 한다
6.Connection을 이용해 데이터베이스에 연결하고 쿼리문을 ResultSet클래스에 결과를 담아온다
7.while문 내부에서 ResultSet을 Todo객체로 바꾼다.
8.테이블을 자바 내에서 사용하기 위해 엔티티클래스를 만든다
-테이블 하나마다 그에 상응하는 엔티티클래스가 존재한다
-데이터를 조회, 수정, 추가,삭제를 집중적으로 해주는 DTO클래스를 작성한다
9.시간이 흐르면서 반복작업을 줄이기 위해 Hibernate와 같은 ORM프레임워크가 나왔고 더 나아가JPA같은 도구들이
개발됬다

데이터베이스와 스프링 데이터 JPA 설정
-H2 데이터베이스
자바 기반의 경량형 관계형 데이터베이스 관리 시스템이다
주로 개발 및 테스트 환겨에서 사용되며, 메모리 기반 데이터베이스나 디스크 기반의 데이터베이스로 구성할 수 있다
H2는 오픈소르로 제공되고, 빠르고 가벼운 성는 때문에 어플리케이션 개발 시 간편하게 데이터베이스를 설정하고
사용할 수 있다

쿼리문을 사용하지 않고 JPA 메서드를 이용해서 테이블에 추가하고 조회까지 해서
결과를 확인한 것

























