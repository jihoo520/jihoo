### 리액트 네이티브

- expo CLI : 복잡한 설정 없이 빠르게 앱을 만들 수 있다.
- 어플리케이션 실행 qr코드를 통해서 내 휴대폰으로 실행해볼 수 있다.(expo go 앱 설치 필요)
- 단점 :
    - 사용할 수 있는 기능에 제한이 있다.
    - 네이티브 코드 수정이 불가능하다.
- React Native CLI
    - expo 없이 순수 React Native 환경에서 앱을 개발할 수 있도록 도와준다.
    - Native 코드를 직접 다루는 환경이다.
    - React Native 앱을 시작부터 끝까지 직접 설정하고 커스터마이징 할 수 있다.
- node.js → npm(node package manager) 패키지를 인스톨하려고 사용
- python → expo-cli 환경에서는 거의 필요가 없다.
- android studio → 에뮬레이터를 활용
- SDK(SoftWare Development Kit)
    - 안드로이드 앱을 개발하기 위한 도구들과 API들의 모음
    - 에뮬레이터
    - 플랫폼 API(각 안드로이드 버전)
    - Build 도구(앱을 실제 실행 가능한 APK파일로 만드는 도구)
    - SDK Tools(안드로이드 앱 개발에 필요한 기본적인 툴 모음)
- 에뮬레이터 :
    - 컴퓨터에서 가상의 안드로이드 스마트폰을 만들어 앱을 테스트 할 수 있게 해주는 프로그램이다.
    - 실제 기기가 없어도 컴퓨터에서 앱이 어떻게 동작하는지 확인할 수 있다.
    - 여러 기기의 모델이나 화면크기, 안드로이드 버전을 설정할 수 있어서 다양한 기기에서 앱이 어떻게 작동하는지 확인할 수 있다.
- 컴포넌트를 만들어서 사용 :
    - 재사용 할 수 있는 조립 블록으로 화면에 나타나는 UI 조각요소
- 독립적이다.
    - 컴포넌트는 다른 코드와 독립적으로 동작한다.
    - 한 곳에서 수정해도 다른 부분에 영향을 주지 않는다.
        
        ```jsx
        const MyButton = ({title}) => {
              return(
                    <Pressable>
                          <Text>{title}</Text>
                    </Pressable>
              )
        }
        
        <MyButton title="로그인" />
        <MyButton title="회원가입" />
        ```
        
- 유지보수가 용이하다.
    - 화면의 각 부분을 작은 UI조각으로 분리해서 만들기 때문에 필요한 부분만 수정할 수 있다.
- JSX문법
    - JavaScript XML의 줄임말
    - 자바스크립트 코드 안에 HTML태그처럼 생긴 문법을 사용할 수 있게 해주는 문법
    - JSX문법을 사용한다고 실제로 브라우저가 이해할 수 있는 것은 아니고, Babel이라는 트랜스파일러를 통해 순수한 자바스크립트 코드로 변환되는 트랜스파일링 과정이 필요하다.
    - JSX문법 → React.createElement()함수로 변환이 된다.
        
        ```jsx
        const element = <button disabled={true}>Clickme</button>
        React.createElement(태그, 속성(객체로 넘어감),자식요소 or 컨텐츠)
        const element = React.createElement(
              "button",
              {disabled:true},
              Click me 
        )
        <div>
              <h1>Hello</h1>
        </div>
        
        React.createElement(
        "div",
        null,
        React.createElement("h1", null, "Hello")
        )
        ```
        
    - div → View
    - Text
    - TextInput
    - ScrollView
    - Button → 할 수 있는게 적다 onPress
    - Pressable → 여러가지 스타일링이 가능 onPress, onPressIn, onPressOut, onLongPress
    - 입력할 때 state보다 간단하게 텍스트를 전달하는 법 : onChangeText
    - 스타일을 주는 방법 3가지
        - 객체형식으로 준다.
        - 속성은 카멜 표현식으로 쓴다.
        1. 인라인으로 주기
        2. 클래스 스타일링
            - <View style={styles.container}>
            
            ```jsx
            <View style={styles.container}>
            </View>
            const styles = StyleSheet.create({
                  container:{
                  }
            })
            ```
            
        3. 외부 스타일시트를 만들고 import해서 사용하기
    - html, 리액트, 리액트 네이티브 요소의 배치가 중요하다.
    - flex를 이용하는게 가장 간단하다.
    - 컨테이너 : 다른 요소들을 감싸는 컴포넌트
    - flex-direction : 요소들을 어떤 방향으로 배치할거냐
    - justify-content : 정해진 요소  배치 방향으로 요소들의 위치를 배치
    - align-items : 주축 반대를 기준으로 요소들의 위치를 배치
    - Platform : 운영체제에 따라 다른 코드를 실행할 수 있게 해주는 모듈


flex-direction: 요소들을 어떤 방향으로 배치할거냐
justify-content: 주축을 기준으로 요소들의 위치를 배치
align-itmes: 주축 반대를 기준으로 요소들의 위치를 배치

Platform
운영체제에 따라 다른 코드를 실행할 수 있게 해주는 모듈
Plaform.OS: 현재 앱이 실행중인 플랫폼을 반환한다
IOS는 ios, Andriod는 android라고 문자열 값을 반환한다

platform.version
운영체제의 버전 번호를 가져오는 속성
29

Styled-component
스타일이 적용된 상태의 컴포넌트

const 사용할 컴포넌트면 = styled.View
          css 코드

attys 사용하기
스타일드 컴포넌트를 사용하면 스타일을 작성하는 곳에서 컴포넌트의 속성도 설정할 수 있다
속성을 설정할 떄도 전달된 props를 이용할 수 있으므로 props의 값에 따라 속성을 변경할 수 있다

key를 이용하여 데이터에 접근하고 값을 불러오거나 저장할 수 있다
비동기 API를 제공하기 떄문에, 데이터 저장과 로딩이 메인 스레드를 차단하지 않는다

한 번 저장된 데이터는 앱을 종료하거나 재부칭 하더라도 유지된다
단, 사용자가 앱을 삭제하면 같이 삭제된다

사용자 설정
테마, 언어 알림 설정 같은 개인화  옵션을 저장하고 불러올때 유용하다

세션관리
인증 토큰이나 사용자 상태로 저장해 로그인 상태를 유지할 떄 사용할 수 있다

앱 초기화 상태
사용자가 앱을 처음 열 때 실행되는 초기 설정이나 튜토리얼 진행 상태 등을 저장할 수 있다

간단한 데이터 캐싱
네트워크 데이터를 캐싱하거나 오프라인 상태에서 사용할 간단한 데이터를 저장할 수 있다































