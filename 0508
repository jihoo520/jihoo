0508 공부

비동기통신을 이용해서
리액트 프로젝트 <-> 스프링부트 프로젝트 연동

리액트
사용자가 이용하는 인터페이스
추가, 조회, 수정, 삭제에 대한 요청

비동기 AJAX
페이지를 새로고침하지 않고 백그라운드에서 서버와 통신하는기술
fetch API, Axios를 이용한 비동기 요청을 AJAX호출이라고도 부른다.

Fetch API
내장된 표둔 HTTP클라이언트 API
네트워크 요청을 보내고, Promise로 응답을 처리하게 해준다
추가 라이브러리 없이 바로 사용할 수 있다.

Axios
자바스크립트로 작성된 외부 HTTP클라이언트 라이브러리이다
브라우저 뿐 아니라 Node.js 환경에서도 동일한 코드로 사용할 수 있다
요청, 응답 인터셉터, 자동 JSON변환, 타임아웃 설정 등 부가 기능을 제공한다

요청, 응답 인터셉터
서버와 통신하기 전, 후 공통 로직 처리를 삽입할 수 있게 해주는 기능
모든 요청에 토큰을 자동으로 붙이거나, 에러 응답을 일괄 처리할 때 유용하다

프로젝트 만들 때 요령
1.패키지를 먼저 만들자
2. Entity부터 만들기(db의 테이블과 1대 1 매핑)
3.DTO만들기
4.Controller만들기
5.Service 만들기
6.Repository만들기

기능을 만드는건 그 다음
추가@PostMapping

조회@GetMapping
ㄴ전체조회
ㄴ하나만 조회
ㄴ범위에 대한 조회

수정@PutMapping

삭제@DeleteMapping

Todo 프로그램(할일 추가 프로그램)
화면 구성(리액트)
기능 구현(스프링부트)
데이터베이승(h2)

지금까지는 모든 것이 로컬로 돌아가고 있고, 나만 사용하는 어플리케이션이었다
우리의 목표는 이 어플리케이션이 많은 사람이 사용할 수 있도록 배포하는 것
각 사용자별로 추가한 할 일이 다르기 때문에 인증 매커니즘을 구현해야 한다

인증
-사용자가 누구인지 확인하는 과정
-사용자가 제공하는 정보(이름과 비밀번호)를 바탕으로 시스템이 해당 사용자가 누구인지
확인하는 단계

방법
-사용자명과 비밀번호
가장 전통적인 방식의 인증방식, 사용자가 입력한 비밀번호와 저장된 비밀번호를 비교하여
신원을 확인한다
-다중 요소 인증
비밀번호 외에도 추가적인 인증수단을 사용하여 보안을 강화한다
-생체인증
지문, 안면인식 등 사용자의 고유한 생체 정보를 이용한 인증 방식
-OAuth 2.0 소셜 로그인
사용자가 페이스북, 구글과 같은 외부 서비스의 계정을 이용해 로그인 하는 방식

인가
-사용자가 인증된 후, 그 사용자가 무엇을 할 수 있는지를 결정하는 과정
-특정 자원이나 기능에 접근할 수 있는 권한을 부여하는 절차

동작과정
사용자가 인증된 후, 시스템은 사용자의 역할, 권한 등을 바탕으로 사용자가 어떤 자원에 접근할 수 있고, 어떤 작업을
수행할 수 있는지를 결정한다

방법
역할 기반 인가(RBAC)
사용자는 특정 역할(관리자, 사용자,게스트 등)에 속하며 각 역할에 따라 다른 권한이 부여된다
정책 기반 인가(PBAC)
미리 설정된 정책에 따라 사용자의 권한이 결정된다
권한 기반 인가
특정 권한에 따라 자원 접근 여부를 결정한다

Basic인증
http요청에 아이디와 비밀번호를 같이 보낼 것이다

동작방식
1. 클라이언트가 요청을 보냄
2.서버가 인증을 요구함
3.클라이언트가 자격증명을 전송(아이디와 비밀번호를 암호화)
4.서버가 인증확인(복호화해서 확인)
5.유저정보가 저장된 데이터베이스 또는 인증 서버의 데이터와 비교
6. 정보가 일치하면 요청받은 일을 수행

장점
단순한고 구현이 쉽다
HTTP 표준이라 모든 HTTP 클라이언트에서 쉽게 지원된다

단점
1.보안 취약점
사용자 이름과 비밀전호가 쉽게 노출될 수 있다
2.HTTPS가 필수다
3.세션 관리가 어려움
연결상태를 유지하지 않기 때문에, 매 요청마다 인증 정보를 함께 전송해야 한다

토큰기반 인증
사용자가 인증에 성공한 후 토큰을 발급받아, 이를 서버와의 통신에서 인증을 처리하는 방식이다.
이 방식은 세션 기반 인증과 달리, 서버에 이용자의 상태를 저장하지 않고, 토큰을 통해 인증을 관리하기 때문에
무상태 방식으로 작동한다

토큰
서버가 사용자를 구별할 수 있는 문자열

Basic인증과 다른점은 아이디와 비밀번호를 매번 네트워크에 전송해야할 필요가 없어
보안 측면에서 조금 더 안전하다

토큰은 서버가 마음대로 생성할 수 있으므로 사용자의 인가 정보 또는 유효기간을 다르게 정하거나
임의로 로그아웃 할 수도 있다

JSON 웹 토큰
-JSON 형식으로 사용자 정보를 저장하고 서명(signature)을 통해 토큰의 무결성을 검증하는 토큰 기반 인증방식
-JWT는 무상태 방식으로, 서버가 사용자 정보를 별도로 저장하지 않고 클라이언트를 인증할 수 있기 때문에
분산 시스템이나  RESTful API에서 많이 사용된다

서명(시그니처)
서명하고 싶은 메시지를 해시함수를 이용해 축약한 후 개인키로 암호화 했을때 나오는 결과값이다

해시함수
임의의 길이의 데이터를 고정 길이의 값으로 변환하는 함수

개인키
암호화된 데이터의 복호화, 전자서명 생성 등에 사용되며, 절대 노출되면 안되는 값

header부분
토큰의 타입, 서명 알고리즘을 포함한다
payload부분
토큰에 담을 실제 정보
signature 부분
header부분, playloadㅂ부분을 Base64로 인코딩 한 문자열을 
선택한 알고리즘과 개인키로 암호화하여 생성한다

Base64
이진 데이터를 텍스트 문자 집합로 안전하게 저장하기 위해 6비트씩 끊어 64가지 문자로 인코딩하는 방식





















































