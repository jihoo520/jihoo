-> git init

git에서 사용하는 전역 이메일

스테이징 영역
커밋을 하기전에 임시로 올리는 공간

3. git에 커밋을 한다
-> git commit -m "메시지"
여기까지는 깃허브에 올리는게 아님

4.원격 저장소(github)와 연결
->git remote add origin 저장소명
origin은 원격 저장소의 별칭 보통 origin을 쓴다

5.브랜치 이름 변경
->git branch -M main

6.깃허브에 올림



git push origin main

checkout을 하는 이유

타 어플리케이션과 통합
우리의 Todo 어플리케이션을 깃허브의 issuer 기능과 연결한다고 치면
타 어플리케이션을 통합한느 기능은 어떻게 구현해야 할까?
가장 간단한 방법은 사용자에게 깃허브의 아이디와 비밀번호를 받는것이다
사용자가 공유기능을 사용할때마다  db에 저장된 아이디와 비밀먼호로 깃허브에 로그인해서
이슈를 가져온다

아이디와 비밀번호가 안전하게 저장은 된건지, 계정 정보를 이용해서 다른 정보를 빼가지 않을지 신뢰하기가 어렵다

OAuto 2.0
다양한 서비스와 어플리케이션 간에 안전하게 자원을 공유할 수 있도록 만들어진 인증 및 권한 부여 프로토콜

서드파티 어플리케이션이 자기 자신 또는 리소스 오너를 대신해 http서비스에 제한된 액세스를 제공하도록 해주는
인가 프레임 워크

주로 클라이언트 어플리케이션이 사용자 데이터를 요청할 때 사용되며, 사용자가 직접 증명을 제공하지 않아도
타사 서비스에 안전하게 접근할 수 있다

제한된 엑세스
'비밀번호'를 이용한 접근과 완전 반대되는 개념이다
서드파티 어플리케이션이 리소스 오너가 허락한 리소스에만 접근할 수 있도록 하겠다

주요 개념
1. 리소스 오너: 자신의 자원에 대한 접근 권한을 가지고 있는 주체
2. 클라이언트: 리소스 소유자의 데이터를 사용하고자 하는 어플리케이션
3.인증서버: 리소스 소유자의 동의를 얻고, 액세스 토큰을 발급하는 서버이다. OAuth 인증 서버는 클라이언트가
적절한 권한을 가졌는지 확인한 뒤 토큰을 발급한다
4.리소스 서버: 보호된 리소스를 제공하는 서버. 예를 들어 사용자의 개인 정보를 저장하고 있는 서버. 클라이언트는
액세스 토큰을 통해 이 서버에 접근할 수 있다
5.액세스 토큰: 인증 서버에서 발급하는 토큰으로, 클라이언트가 리소스 서버에 요청할 때 이를 사용해 인증 받는다

리소스 서버 또는 인가 서버는 클라이언트 어플리케이션을 미리 알고 있어야 한다
즉, 클라이언트 어플리케이션은 리소스 서버 또는 인가 서버에 등록된 어플리케이션이다-> git init

git에서 사용하는 전역 이메일

스테이징 영역
커밋을 하기전에 임시로 올리는 공간

3. git에 커밋을 한다
-> git commit -m "메시지"
여기까지는 깃허브에 올리는게 아님

4.원격 저장소(github)와 연결
->git remote add origin 저장소명
origin은 원격 저장소의 별칭 보통 origin을 쓴다

5.브랜치 이름 변경
->git branch -M main

6.깃허브에 올림



git push origin main

checkout을 하는 이유

타 어플리케이션과 통합
우리의 Todo 어플리케이션을 깃허브의 issuer 기능과 연결한다고 치면
타 어플리케이션을 통합한느 기능은 어떻게 구현해야 할까?
가장 간단한 방법은 사용자에게 깃허브의 아이디와 비밀번호를 받는것이다
사용자가 공유기능을 사용할때마다  db에 저장된 아이디와 비밀먼호로 깃허브에 로그인해서
이슈를 가져온다

아이디와 비밀번호가 안전하게 저장은 된건지, 계정 정보를 이용해서 다른 정보를 빼가지 않을지 신뢰하기가 어렵다

OAuto 2.0
다양한 서비스와 어플리케이션 간에 안전하게 자원을 공유할 수 있도록 만들어진 인증 및 권한 부여 프로토콜

서드파티 어플리케이션이 자기 자신 또는 리소스 오너를 대신해 http서비스에 제한된 액세스를 제공하도록 해주는
인가 프레임 워크

주로 클라이언트 어플리케이션이 사용자 데이터를 요청할 때 사용되며, 사용자가 직접 증명을 제공하지 않아도
타사 서비스에 안전하게 접근할 수 있다

제한된 엑세스
'비밀번호'를 이용한 접근과 완전 반대되는 개념이다
서드파티 어플리케이션이 리소스 오너가 허락한 리소스에만 접근할 수 있도록 하겠다

주요 개념
1. 리소스 오너: 자신의 자원에 대한 접근 권한을 가지고 있는 주체
2. 클라이언트: 리소스 소유자의 데이터를 사용하고자 하는 어플리케이션
3.인증서버: 리소스 소유자의 동의를 얻고, 액세스 토큰을 발급하는 서버이다. OAuth 인증 서버는 클라이언트가
적절한 권한을 가졌는지 확인한 뒤 토큰을 발급한다
4.리소스 서버: 보호된 리소스를 제공하는 서버. 예를 들어 사용자의 개인 정보를 저장하고 있는 서버. 클라이언트는
액세스 토큰을 통해 이 서버에 접근할 수 있다
5.액세스 토큰: 인증 서버에서 발급하는 토큰으로, 클라이언트가 리소스 서버에 요청할 때 이를 사용해 인증 받는다

리소스 서버 또는 인가 서버는 클라이언트 어플리케이션을 미리 알고 있어야 한다
즉, 클라이언트 어플리케이션은 리소스 서버 또는 인가 서버에 등록된 어플리케이션이다


























