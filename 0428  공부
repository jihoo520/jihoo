0428

REDUX
context api의 확장
상태관리 라이브러리 어플리케이션 전역에서 사용하는 상태를 예측 가능하게 관리하도록 도와준다

주요구성요소
Store
어플리케이션의 단일 상태 트리를 보관하는 장소

Action
state에 어떤 변화가 일어나야 하는지 설명하는 객체
반드시 type 프로퍼티를 가져야 한다
그 외 전달하고 싶은 데이터를 payload에 담는다

Reducer
현재 상태화 Action을 받아서, 새로운 상태를 반환하는 순수함수

순수함수
주어진 입력만을 사용하여 결과를 도출하고, 함수 외부의 상태나 변수에 의존하지 않으며
부작용을 일으키지 않는 함수

동일한 입력값에 항상 동일한 결과를 반환한다는 특징

디스패치
-액션을 스토어에 전달하는 메서드
-컴포넌트에서 디스패치를 통해 액션을 발생시키고, 리듀서가 상태를 업데이트하도록 한다

Action.js
화살표함수에서 소괄호로 감싸면 묵시적으로 내용을 return
export const action = () => ({
        type: 'INCREMENT'
})



백엔드는 화면이 없음-> 콘솔을 통해서 확인, 데이터를 프론트엔드로 넘겨서 확인 하던가

포스트맨
우리가 만든 기능을 테스트해볼수 있는 프로그램

소켓: 네트워크상에서 데이터 송수신을 위해 운영체제가 제공하는 엔드포인트이다
CSRF: 웹 어플리케이션에서 사용자가 의도치 않은 상태 변경 요청이 공격자에 의해 자동으로 전송되도록 하는

스프링부트의 프로젝트의 구성

src/main/java : 서버단 java파일
test/main/java: 테스트하기 위한 java파일
src/main/resources: 설정 파일 및 화면에 필요한 파일들
ㄴstatic: js.css파일
ㄴtemple:: html파일
ㄴapalication.properties: 설정코드가 들어간다
build.gradle: 라이브러리 의존성 관리

@SpringBootApplication
@Configguration,@EnableAutoConfiguration,@ComponectScan  세가지를 하나로 합친것이다

@Configguration: 해당 클래스가 설정 파일림을 알려주는 용도
 @ComponectScan:자동으로 컴포넌트 클래스를 검색해서 컴포넌트와 빈 클래스를 등록함
 @EnableAutoConfiguration:스프링의 다양한 설정이 자동으로 구성되고 완료됨

스프링의 핵심 개념
1.ioC (inversion of Control, 제어역전)
객체의 생성과 관리를 개발자가 아닌 프레임워크나 컨테이너가 대신 관리하도록 하는 개념

전통적인 객체 지향 프로그래밍에서 객체 간의 의존성을 개발자가 직접 처리하는
반면, ioC 는 이 흐름을 역전시켜 스프링 프레임워크와 같은 컨테이너가 객체 간의 의존성을 주입하고 관리한다

ioC는 어플리케이션의 유연성과 유지보수성을 높이는데 기여하며, 스프링 프레임 워크에서 가장 핵심적인 개념 중 하나

ioC의 주요 개념
1. 의존성 주입
-객체를 직접 대입하는 것이 아니라 외부에서 필요한 의존성을 주입하는 방식이다

2.제어의 역전
전통적으로는 개발자가 직접 객체를 생성하고 관리해야 하지만, ioC에서는 객체의 생성과 생명주기를 스프링이 관리한다

즉, 개발자가 아니라 프레임워크가 객체의 생명주기를 관리하는 방식



























