eb를 하는게 편하다 -> 구성을 다해주고 우리는 배포만 해주면 된다.

ec2를 통해서 프로젝트를 실행하는것이기 때문에 사실상 ec2만 만들어서 빌드한 프로젝트를 넣고 실행해도 가능하다.

eb에서는 따로 ec2에 접속을 하지는 않았다. 포트설정도 많이 해준게 없음

EC2만들기
1. OS 정하기 -> 윈도우도 가능은 하나 서버용으로 사용할거라면 리눅스로 하는게 정신건강에 좋다.
2. 인스턴스 유형을 결정
AWS에서 제공하는 가상 서버의 스펙(성능,메모리,네트워크속도등)에 따라 나뉜다.(변경 가능함)
3. 키페어 설정
EC2에 원격접속(SSH)하기 위해서는 키페어를 반드시 생성하고 보관해야 한다.

키 페어는 공개키와 개인키로 구성된다.
EC2에 접속할 때, 개인 키를 사용해 인증을 수행한다.
AWS는 EC2인스턴스를 만들 때 공개 키를 인스턴스에 넣고, 개인키는 사용자가 다운로드 한다.
재다운로드 불가능하므로 반드시 백업해놔야한다.

4. 인바운드 가능한 포트 설정
포트(port)
ip주소는 하나인데 여러 서비스를 운영하고 있다.
이때 각 서비스가 구분되는 입구번호가 포트이다.

ssh -> 22
http -> 80
https -> 443
MySQL -> 3306

인바운드/아웃바운드
인바운드 외부 -> 서버로 들어오는 트래픽
ex) 사용자가 ec2웹 서버에 접속
아웃바운드 서버 -> 외부로 나가는 트래픽
ex) ec2가 외부 API 서버에 요청

포트를 열어놓지 않으면 접속이 안된다.

SSH
원격 서버에 안전하게 접속하기 위한 암호화된 통신 프로토콜
네트워크를 통한 통신 내용을 암호화 해서 중간에 탈취하더라도 내용을 볼 수 없다.

클라이언트(로컬pc)에서 SSH명령을 사용해 접속을 시도
서버는 공개 키로 요청을 받는다.
클라이언트는 개인 키로 서명하여 인증
인증이 성공하면 양방향 암호화된 채널이 형성된다.
명령어, 파일 송수신 등 모든 통신은 안전하게 진행

powershell을 이용하여 원격접속

git bash를 이용하여 원격접속

접속 명령어

ssh -i "내키.pem" ec2-user@ip주소

sudo
superuser do의 줄임말로 일반 사용자가 관리자 권한으로 명령을 실행할 수 있게 해주는 명령어이다.

리눅스 시스템은 보안을 위해 관리자(root)계정과 일반 계정을 구분한다. 일반계정은 시스템 설정이나 설치 작업을 할 수 없기 때문에 sudo를 써야 한다.

dnf는 패키지 관리자로, 리눅스에서 소프트웨어를 설치/삭제/업데이트하는 도구이다.
 -y -> yes의 약자 yes를 입력해주는 옵션
sudo dnf install java-17-amazon-corretto -y

우리의 로컬 피시에서 빌드된 파일 ec2 환경으로 복사하기
scp -i "ssh키.pem" 보내려는파일명.jar ec2-user@퍼블릭ip:/home/ec2-user

Nginx
가볍고 빠른 웹서버이자 리버스 프록시 서버이다.

리버스 프록시
클라이언트의 요청을 받아 대신 백엔드 서버에 전달하고, 그 응답을 클라이언트에게 다시 전달해주는 중간 서버이다.

왜 쓰면 좋을까?
포트 통합 
리액트(3000) + 스프링부트(5000)을 Nginx에서 하나로 묶어서 80/443포트만 사용할 수 있다.
보안 강화
실제 백엔드 서버 IP, 포트를 외부에 숨길 수 있다.

브라우저 -> Nginx(80/443) -> ApiServer(Spring 5000)

sudo dnf install nginx -y

sudo systemctl enable nginx
sudo systemctl start nginx

systemctl
시스템의 서비스를 관리하는 명령어

enable
리눅스 서버가 재부팅될 때 NginX가 자동으로 실행되게 등록하는 명령어

start
지금 당장 실행하라는 명령어

java -jar 빌드파일이름 --server.port=5000

퍼블릭ip -> Nginx로 접속이 가능
퍼블릭ip:5000 -> springboot프로젝트로 접속이 가능

우리가 리액트에서 요청할때 api.springbootlhj.store

스프링부트 프로젝트를 백그라운드에서 실행하는법
nohup java -jar 파일이름.jar --server.port=5000 &

sudo nano /etc/nginx/conf.d/myapp.conf에 아래 내용 작성하기

server { -> 특정 도메인이나 포트를 처리할 서버를 정의
    listen 80; -> 80번 포트로 오는 요청을 처리하겠다.
    server_name api.springbootlhj.store;
	ㄴ 브라우저 주소창에 입력한 도메인이 정확히 이 값과 일치해야 이 블록이 작동한다.

    location / { -> 요청 경로가 /로 시작하는 모든 경로를 처리함
        proxy_pass http://localhost:5000;
	ㄴ 요청을 로컬에서 5000번 포트를 사용하는 백엔드 서버로 전달한다.
        proxy_set_header Host $host;
	ㄴ 원래 클라이언트가 보낸 Host 헤더 값을 유지해서 백엔드로 전달 api.springbootlhj.store 그대로 전달하겠다.
        proxy_set_header X-Real-IP $remote_addr;
	ㄴ 클라이언트의 실제 IP 주소를 백엔드에 전달
    }
}

sudo nginx -t
sudo systemctl restart nginx

route53에 api.springbootlhj.store에 퍼블릭 IP 할당하기

브라우저 주소창에 app.springbootlhj.store으로 들어가서 백엔드 기능이 작동하는지 확인하면 끝

S3를 이용한 리액트 프로그램 배포

S3
AWS에서 제공하는 오픈 스토리지 서비스
파일을 인터넷에 저장하고 불러올 수 있는 클라우드 저장소

주요특징
서버 없이 사용 가능
무제한 저장 가능
URL로 접근 가능
정적 웹 호스팅 가능

구성요소
Bucket(버킷)	폴더 개념. S3에서 파일을 저장하는 최상위 공간
Object(객체)	실제 저장된 파일(데이터). 이름과 메타데이터 포함
Key		객체의 고유한 이름
Region		버킷이 위치한 물리적 지역(서울,도쿄...)

핵심기능
파일 업로드/다운로드	웹,앱,서버에서 파일 저장 및 가져오기
공개 URL 접근		버킷을 퍼블릭으로 열면 누구나 접근 가능
정적 웹 호스팅		React 등 정적 웹앱 배포 가능
버전관리			파일의 변경 이력을 자동으로 저장
수명 주기 관리		일정 기간 후 파일 삭제
서버사이드 암호화		저장 중인 데이터 암호화


1. S3 버킷 만들기
2. 버킷 이름 지정하기(고유해야 함 겹치면 안됨)
3. 액세스 차단 해제하기 -> 내려서 버킷 만들기
4. 속성탭으로 이동하여 맨아래로 스크롤하고 정적웹사이트 호스팅 편집클릭
5. 활성화 클릭
6. 인덱스문서 index.html, 오류문서 index.html로 설정 -> 변경사항저장
7. 권한탭으로 이동하여 버킷 정책 메뉴의 편집 누르기
8. 정책 생성기를 통해 정책을 만든다.
Type of Policy : s3 bucket policy
Principal : *
actions : getobject
arn : 버킷arn 붙혀넣기/*

Add Statement -> Generate Policy json코드 복사

생성한 정책을 붙여넣고 변경사항 저장

9. 빌드파일 업로드
build폴더를 통째로 업로드하면 잘 안되는거같다.
build안에 있는 내용들을 업로드 한다.
※ static폴더가 같이 안올라가는 경우가 있음
static폴더도 따로 업로드시켜준다.

엔드포인트를 브라우저에 입력하면 접속할 수 있다.









