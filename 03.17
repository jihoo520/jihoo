03.17
db
스키마 개념 공부
-외부스키마
-개념스키마

테이블
ㄴ행
ㄴ열

자료형
문자형 VARCHAR
숫자형 NUMBER
날짜형 DATE

제약조건
NOT NULL
CHAECK
PRIMARY KEY
FOREIGN KEY
UNIQUE

 모델링 -> 프로젝트 만들때 주의할것
1. 요구사항 분석
2. 개념모데링
3. 논리모델링
4. 물리모델링

테이블에 어떤 속성이 들어가야 할지
데이터의 길이는 얼마나 될지
테이블간의 관계는 어떻게 구성해야할지
일대일, 일대다, 다대다

DML
SELECT조회 - 테이블 조작X
INSERT추가 - 데이터 1개 추가
DELETE삭제- 위험 -> 조건을 잘 설정
UPDATE수정 - 위험

이상현상과 정규화
삽입이상: 필요없는 데이터도 넣어야한다
갱신이상: 전부다 갱신되지 않아서 정확하지 않을 수 있다
삭제이상: 필요한 정보까지 삭제해버릴수 있다.

함수적 종속성
완전함수종속이 되도록 만들어야 한다
부분함수종속
이행함수종속

함수적 종속성을 제거하는 과정이 정규화

1차 정규화
2차 정규화
3차 정규화

정규화를 너무 많이 하면 테이블이 많이 쪼개져서 퀴리문을 작성하는데 더 힘들어지고
오히려 조회시간이 더 길어질 수 있다.

오라클에서 제공하는 함수
문자함수

숫자함수

날짜함수

집계함수 -> NULL 값을 집계하지 않음

순위 함수

그룹화
소그룹을 만들어서 결과를 얻고자 할 때

HAVING절
WHERE과의 차이점

WHERE에서는 집계합수에 대한 조건을 줄 수 없음
HAVING은 일반컬럼, 집계함수에 대한 조건을 둘 다 줄 수 있다.

whre은 개별 행에 조건이 적용
-group by 전에 행을 필터링한다.

having은 group by가 완료된 다음에 적용

구문 실행순서
1. FROM
2. WHERE
3. GROUP BY
4. HAVING
5. ORDER BY

sql 중에서
DDL
DML
DCL
데이터 제어어
데이터베이스에 접근하고 객체들을 사요하도록 권한을 주고 회수하는 명령어

GRANT: 권한부여
REVOKE: 권한강탈

SCOTT을 통해 BABY라는 일반 계정을 생성해보려고 한다

계정 생성항법
create user 계정명 identified by 비밀번호;

baby계정이 사용할 저장소를 생성해보자
select tablespace-name, sttus, contents
from dba_tablespaces;

dba_tablespaces
Oracle 데이터베이스 내 모든 테이블 스페이스에 관한 정보를 제공하는 뷰

테이블스페이스
논리적 저장소 단위
데이터 베이스 객체의 데이터를 
저장하는 컨테이너 역할을 하며 실제 데이터는 하나 이상의 데이터 파일에 저장된다

테이블스페이스는 하나 이상의 데이터 파일로 구성이 되고 이파일 들은
물리적 자장소에 위치하며 실제 데이터를 저장한다

status
테이블스페이스에 저장되는 데이터의 종류를 표시

autoextensible
데이터 파일이 자동 확장 기능으로 설정되어있는지 확인

권한을 주거나 뺏는 것은 관리자 계정으로부터 해야한다

baby 계정의 기본 테이블스페이스를 BABY로 지정하면서
무제한으로 사용할 것이다.
alter user 계정명 default tablespace 테이블스페이스명 QUOTA unlimited on baby;

QUOTA
사용자가 특정 테이블스페이스 내에서 사용할 수 있는 디스크 공간의 최대량을 지정하는데 사용되는 키워드

사진 문제 참고
CREATE TABLESPACE usesr_exam DATAFILE   SIZE 10m;

user_exam 테이블 스페이스에 새로운 사용자를 생성하고 CONNECT와
RESOURCE 권한을 부여하는 쿼리문을 작성하시오
1)사용자이름: exam
2)비밀번호: 1111
CREATE USER exam IDENTIFIED BY 1111 DEFALUT TABLESPACE user_exam;
GRANT CONNECT, RESOUCRE TO exam;

4.생성된 테이블 스페이스를 확인하기 위해서 테이블 스페이스의 목록을 조회할 수 있는 쿼리문을 작성하시오
SELECT * FROM DBA_TABLESPACES;

INDEX의 삭제
조회 성능을 높이기 위해 만든 객체지만 저장공간을 많이 차지하며 DDL작업(INSERT, DELETE, UPDATE) 시
부하가 많이 발생해 전체적인 데이터베이스 성능을 저하시킨다.
DBA는 주기적으로 INDEX를 검토하여 사용하지 않는 인덱스는 삭제하는 것이 데이터베이스 전체 성능을 향상 시킬 수 있다.
DROP INDEX 인덱스명;

INDEX REBUILD
생성된 인덱스는 기본적으로 ROOT, BRANCH, LEAF로 구성된 트리 구조를 가지며 DDL 작업이 오랜시간 발생하면
트리의 하위 레벨이 많아져 트리 구조의 한쪽이 무거워지는 현상이 생긴다.
이러한 현상은 인덱스의 검색속도를 저하시키고 전체 데이터베이스의 성능에 영향을 미친다. 
그러므로 주기적으로 INDEX를 리빌딩하는 작업을 해줘야 한다.
ALTER INDEX 인덱스명 REBUILD;

EXPLAIN PLAN FOR
-ORACLE 데이터베이스에서 SQL쿼리가 실행될 때
어떤 경로로 수행되는지를 미리 확인할 수 있는 명령어
주요 개념
실행 계뢱
SQL 쿼릴르 처리하기 위한 단계별 작업순서를 나타낸다
-테이블 스캔, 인덱스 스켄, 조인 방식이 포함된다
-실제로 쿼리를 실행하지는 않고, 쿼리의 실행 경로를 분석
-실행 계획을 통해 쿼리 성능 개선, 인덱스 활용 여부
-PLAN_TABLE
-실행 계획정보는 기본적으로 plAN_TABLE이라는 테이블에 저장된다
이후 DBMS_XPLAN.DISPLAY함수를 이용하여 보기 쉽게 출력할 수 있다
