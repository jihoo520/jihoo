저장된 전체 key불러오기
const keys = await AsyncStorage.getAllkKeys();

화살표 함수로 호출하는 이유
1.즉시 호출 ㅂ아지
컴포넌트가 렌더링될 때 setCount(count+1)이 즉시 실행되어
onPress 이벤트가 발생할 때가 아닌 렌더링 시점에 setCount가 호출된다

2.this 바인딩 문제를 해결
리액트 클래스 컴포넌트에서는 일반적으로 이벤트 핸들러에this가 현재 컴포넌트를 참조하도록 사용했어야 했다

useState의 상태 저장 및 변경
상태는 컴포넌트가 재랜더링될떄 유지가 된다
상태변경함수를 사용하면 컴포넌트가 자동으로 재랜더링 된다

상태변경함수는 비동기적으로 동작한다
변경 직후의 state값을 바로 읽으면, 여전히 이전값일 수 도 있다
상태변경함수는 즉시 상태를 변경하는 것이 ㅇ아니라 react가 
다음 렌더링 타이밍에 상태를 변경하고 컴포넌트를 다시 랜더링한다

React는 성능 최적화를 위해 여러개의 setCount(count+1)가 호출이 될떄
하나의 랜더링 사이클로 묶아서 처리를 한다

setCount(count+1);
setCount(count+1);
setCount(count+1);
이렇게 3번을 호출해도 실제로는 한 번만 핸더링 된다

이전 상태값이 꼭 필요한 경우 반드시 함수형 업데이트를 사용해야 한다
setCount(prev => prev +1);
setCount(prev => prev +1);
setCount(prev => prev +1);

useMemo
메모이제이션을 통해 특정 연산의 결과를 저장해두고, 불필요한 반복계산을 피하도록 도와준다
이 훅은 복잡한 계산이 매번 다시 이루어지지 않도록  최적화하는 역할을 하며, 의존성 배열에 따라
값이 바뀔때만 연산이 다시 수행되도록 설정할 수 있다

메모제이션이란 같은 계싼을 반복해야 할 떄 그 결과를 저장해두고 
다시 필요할 때 저장된 값을 꺼내 사용하는 기법

반복적으로 동일한 연산을 수행하지 않아도 되어, 성능이 크게 향상된다
useMemo가 이 메모제이션을 사용할 수 있도록 지원하는 훅이다

동작방식
useMemo는 특정 계산의 결과를 기억하고 있다가, 다음에 해당 계산이 필요할 떄 의존하는 값이
바뀌지 않으면 이전 결과를 그대롷 반복한다

useMemo(() => {}, []);

첫번째 인자(값을 계산하는 로직)
결과적으로  return 값이 memoizedvalue에 저장된다
계산 비용이 크거나 복잡한 로직을 여기에 작성한다

두 번째 인자는 의존성 배열
이 배열 안의 값중 하나라도 변경되면, 첫 번째 함수가 실행된다
이 배열이 변하지 않으면 이전에 계산된 값을 재사용한다

의존성 배열을 비워두면 마운트시 한번 계산하고 끝이나기 때문에 오류 발생 가능성이 있다
반드시 의존하는 값은 두번쨰 인자에 포함시켜야 한다

커스텀 hook만들기
우리가 만들 hook 함수는API에 GET요청을 보내고 응답을 받는 함수이다
리액트 네이티브에서는 네트워크 통신을 위해 fetch,axios를 제공하고 추가적으로 WebSocket도 지원한다

이번에는 fetch를 이용해서 useFetch라는 이름의 hook을 만들어 보자


























































