로드밸런서
-서버에 대한 네트워크 트래픽을 효율적으로 분산시켜 여러 서버로 나누어 처리하는 장치 또는
소프트웨어이다
-로드밴런서를 사용하면 트래릭 부하를 분산시켜 각 서버에 가해지는 부잠을 줄이고, 서버가 과부하로 인해
다운되는 것을 방지하여 어플리케이션의 성능과 가용성을 높일 수 있다

Application Load Balancer(ALB): L7 로드밸런서로, HTTP 및
HTTPS 트래픽을 처리하며, 어플리케이션 기반 라우팅을 지원한다

OSI 7 계층
-네트워크 통신 과정을 7개의 계층으로 나눈 모델로, 컴퓨터 네트워크에서 통신이 이루어지는
방식과 각 단계의 역할을 명확하게 하기 위해 설계되었다.
-L1: 물리계층 물리적 매체를 통해 비트를 전송
-L2: 데이터링크계층 프레임 단위의 데이터 전송
-L3: 네트워크 계층 IP주소 기반 경로 설정 및 라우팅
-L4: 전송계층 신뢰성 있는 전송, 오류 검출, 포트 기반 통신
-L5: 세션계층 세션관리, 대화제어, 데이터 동기화'
-L6: 프레젠테이션 계층 데이터 암호화/복호화, 데이터 형식변환
-L7: 응용 계층 사용자와 네트워크간 인터페잉스 제공

타겟 그룹
-로드밸런서가 트래픽을 분산시킬 대상을 정의하는 그룹
-로드밸런서에 연결된 인스턴스, 컨테이너, IP주소 등의 리소스를 그룹으로 묶어 관리하며
이를 통해 로드밸런서는 효율적으로 분배할 수 있다

타겟
로드밸런서가 트래픽을 보내는 대상

인바운드규칙
-네트워크 보안이나 특정 인프라 시스템으로 들어오는 트래픽을 제어하는 규칙을 말한다
-주로 방화벽이나 보안 그룹 설정에 사용되며, 허용 또는 차단할 트래픽을 정의하는데 활용한다
소스: 어떤 IP주소 또는 ip범위에서 오는 트래픽을 허용할지 결정 -> ip4로 오는 모든 요청
프로토콜: 허용할 트래픽의 프로토콜을 설정한다
포트: 특정 어플리케이션이 사용하는 포트를 지정하여 해당 포트로 접근하는 트래픽을 허용하거나 차단
http는 80, https는 443을 사용한다.

https
서버에 SSL인증서를 설치해야한다
인증서는 신회할 수 있는 인증기관이 발급하며, 해당 서버가 그 주제가 맞는지 증명해준다
-인증서를 통해 클라이언트는 서버가 신뢰할 수 있는 대상인지 확인한 후 통신을 시작할 수 있다

CI/CD
-우리가 서비스를 배포하고 운영하던 중 코드를 변경할 일 생기면 다시 빌드하고 배포를 해야했다
-프로젝트의 규모가 커지게 되면 이 작업은 굉장히 힘들어진다.
-CI/CD를 도입하면 빌드부터 배포까지의 과정을 자동화 할 수 있고, 잘 되는지 모니터링 할 수 있다.

CI(continuous Integration)
-지속적인 통합
-개발자를 위해 빌드와 테스트를 자동화하는 과정
-CI는 변경사항을 자동으로 테스트해 어플리케이션에 문제가 없다는 것을  보장한다
-그리고 정기적으로 빌드하고, 테스트하므로 여러 명이 동시에 작업을 하는 경우 충돌을 방지하고 모니터링
할 수 있다
-코드 변경 사항이 코드 저장소에 업로드되면  CI를 시작하고, CI도중에 문제가 생기면 실팰하므로
코드의 오류도 쉽게 파악할 수 있다.

CD(Continuous Deployment)
-배포 준비가 된 코드를 자동으로 서버에 배포하는 작업을 자동화 한다
-CI가 통과되면 개발자가 수작업으로 배포하지 않아도 자동으로 배포하니 매우 편리해진다

github에 ssh키 넣기

GithubAction
-github에서 제공하는 서비스
-CI/CD를 자동화 하는 도구로, github 저장소 내에서 직접 실행 되는 워크플로우 자동화 기능이다
-repository에 특정 이벤트가 발생하면 특정 작업을 하거나 주기적으로 특정 작업을 반복할 수 있다
-누군가 코드를 작성해 github에 업데이트 하면 해당 코드에 문제가 없는지 자동으로 코드를 빌드, 테스트 한 이후
배포까지 할 수 있다

주요기능
1.코드를 푸시하면 자동으로 빌드/테스트/배포
2.github저장소와 통합돼 손쉽게 자동화
3.리눅스, macOS, Windows환경에서 실행 가능
4. 오픈소스 액션들을 공유하는 Marketplace존재

name:워크플로우 이름
on: 트리거 이벤트 설정
ㄴpush: 특정 branch에 push될 때 실행
ㄴpull_request: pr생성/수정시 실행
ㄴschedule: 일정 시간마다 실행
ㄴworkflow_dispatch: 수동 실행 버튼 활성화
jobs: 실행할 job들을 정의하는 영역
ㄴruns-on: 이 job을 어떤 운영체제 환경에서 실행할지 지정
ㄴsteps:job내에서 실행할 작업 단계 목록
ㄴneeds: 다른 job이 끝난 뒤 실행되도록 의존성 설정 가능

지원하는 운영체제 목록
ubnutu-latest    최신 우분투
ubuntu-특정버전   특정 우분투 버전
































