0411 공부

바이트 기반의 스트림
ㄴ입력스트림: InputStream -> FileputStream
ㄴ출력스트림: OutputStream -> FileOutputStream

입력: 파일의 내용 읽어오기, 키보드 마우스의 입력값 읽어오기
출력: 자바에서 가공한 내용을 파일 내보내는 것

문자 기반의 스트림
ㄴ입력스트림: Reader -> FileReader
ㄴ툴력스트림: 

보조스트림
읽어오는 것도 바이트 배열을 사용한면 속도가 더 빠르다

BufferedInputStream

보조스트림은 단독으로 쓰일 수 없다
기반스트림의 객체를 필요로 한다

키보드에서 입력은 더이상 스캐너로 받지 않는다
Scanner -> 무겁고 느리다

BufferedReader 를 통해 키보드에서 입력받기
System.in이 바이트 기반의 스트림이지만 텍스트 데이터를 다루기 위해 문자스트림이 필요하다

1.바이트 -문자간 변환
InputStreamReader 는 System.in과 같이 바이트 단위로 제공되는 데이터를 문자로 변환한다

2.BufferedReader와의 호환성
BufferedReader는 문자 기반 입출력을 위한 클래스이므로 Reader객체가 필요하다
InpuyStreamReader 를 이용해 System.in을 문자스트림으로 변환하여 BufferedReader에 전달함으로써
한줄 단위의 입력 등 문자 단위 처리가 가능해진다

Enumeration(열거형)
1.관련된 상수들을 하나의 그룹으로 묶어 표현할 수 있는 특별한 클래스
2.열거형 안에 정의되는 각 상수들은 열거형 타입의 객체이다
3. 상수들 외에도 필드, 생성자, 메서드를 가질 수 있다
4. java의 enum은 클래스 수준의 기능을 제공하는 객체이다

public enum 열거형 이름{
  상수, 상수, 상수;
}

public class main{
public static void main{
열거형의 객체를 직접 생성하는것은 불가능하다
열거형의 생성자는 기본이 private 이기 때문에 외부에서 호출하는 것이 불가능하다
}
}



어노테이션
프로그램의소스코드안에 다른 프로그램을 위한 정보를 미리 약속된 형태로 포함 시킨 것
주석처럼 프로그래밍 언어에 영향을 미치지 않으면서도 다른 프로그램에게 유용한
정보를 제공할 수 있다는 장점이 있다

표준어노테이션
자바에서 제공하는 어노테이션
@Override
@Functionallnterface

메타어노테이션
사용자 정의 어노테이션을 만들기 위한 어노테이션
@Target: 어노테이션이 적용될 수 있는 위치(필드, 메서드, 클래스 등)
@Retention: 어노테이션의 유지 범위를 지정(런타임, 컴파일 등)
@Documented: javadoc문서에 어노테이션 정보 포함 여부
@Inherited: 자식 클래스에게 상속될 수 있는 어노테이션 여부

어노테이션 선언시 규칙 정리
1. 선언 키워드는 @interface

public @interface MyAnnotation{
}

2.어노테이션 속성은 메서드 형태로 정의를 한다
-추상메서드 형태로 정의를 해야한다

3. 속성의 반환 타임은 제한적이다
기본타임, String, Class<?>, 열거형 다른 어노테이션, 배열

4. 속성에 기본값을 정의 할 수 있다

5. 속성이름이 value일 경우 특별 규칙
@MyAnnotation(value="xxx")
@MyAnnotation("xxx") -> 속성 이름이 value

6.어노테이션 자체이는 예외를 던질 수 없다
-어노테이션 속성은 단순 선언만 가능하고 예외, 로직, 조건문 등은 포함할 수 없다
String value() throws Exception;

7.속성은 매게변수를 가질 수 없다

리플렉션이란?
클래스, 메서드, 필드, 생성자 등의 정보를 프로그램 실행 중에 동적으로 조사하거나
조작할 수 있는 기능

리플렉서 API의 핵심 클래스
Class <?>    클래스의 메타 정보를 저장할 수 있는 클래스
Field        클래스의 필드를 표현
Method       클래스의 메서드를 표현
Constructor  생성장를 표현
Annotation   어노테이션 정보를 표현

라이브러리
다양한 기능을 쉽게 사용할 수 있도록 미리 만들어진 클래스와 메서드의 집합

1.표준 라이브러리
-JDK에 기본적으로 포함되어 있음

2.외부 라이브러리
-개발자 별도로 다운로드해서 사용하는 라이브러리

Statement 보안위험
State stmt = conn.createStatemet();
String sql = "Select * from emp where ename="+inputName+"";

'OR '1' ='1같은 값이 들어가게 되면 전체 테이블이 출력되는 SQL Injection발생 위험

























